{"version":3,"sources":["../src/cli.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,IAAM,SAAS,gBAAW,SAAX;;;;;;AAMf,IAAM,UAAU,SAAV,OAAU;;CAAV;;;;;AAKN,IAAM,YAAY,SAAZ,SAAY;SAChB;sCAAI;;;;WACF,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV;aACV,uCAAM,KAAK,MAAL,CAAY,UAAC,GAAD;2CAAS;;;;eACzB,MAAM,OAAO,GAAP,CAAN,GAAoB,yBAAW,IAAX,CAApB;OADgB,EAAlB;KADU;GADd;CADgB;;;;;AASlB,IAAM,QAAU,SAAV,KAAU,CAAC,CAAD,EAAO;AACrB,UAAQ,GAAR,CAAY,EAAE,KAAF,GAAU,EAAE,KAAF,GAAU,CAApB,CAAZ,CADqB;CAAP;;;;;;;AAShB,IAAM,QAAU,UAAU,aAAG,SAAH,CAApB;AACN,IAAM,OAAU,UAAU,aAAG,QAAH,CAApB;AACN,IAAM,SAAU,UAAU,UAAC,IAAD,EAAO,EAAP;SAAc,aAAG,MAAH,CAAU,IAAV,EAAgB,aAAG,IAAH,GAAU,aAAG,IAAH,EAAS,EAAnC;CAAd,CAApB;;;;;;AAMN,IAAM,SAAS,SAAT,MAAS,CAAC,KAAD,QAA4B;MAAlB,eAAkB;MAAb,qBAAa;;AACzC,SAAO,KAAP,EACG,IADH,CACQ;WAAW,KAAK,KAAL;GAAX,CADR,CAEG,IAFH,CAEQ;WAAW,OAAO,KAAK,QAAL,EAAP;GAAX,CAFR,CAGG,IAHH,CAGQ;WAAW,MAAM,0BAAO,IAAP,CAAN,GAAqB,IAArB;GAAX,CAHR,CAIG,IAJH,CAIQ;WAAW,MAAM,MAAN,EAAc,MAAd;GAAX,CAJR,CAKG,KALH,CAKS,KALT,EADyC;CAA5B;;;;;AAYf,IAAM,QAAQ,SAAR,KAAQ,CAAC,KAAD,EAAQ,OAAR;SACZ,aAAG,KAAH,CAAS,KAAT,EAAgB;WACd,OAAO,KAAP,EAAc,OAAd;GADc;CADJ;;AAId,IAAM,aAAa,SAAb,UAAa;SAAQ,KAAK,MAAL,CAAY,CAAZ,EAAe,WAAf,KAA+B,KAAK,KAAL,CAAW,CAAX,EAAc,WAAd,GAA4B,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,CAA/B;CAAR;;;;;AAKnB,IAAM,kBAAkB,SAAlB,eAAkB,CAAC,IAAD,EAAO,MAAP,EAAkB;AACxC,MAAM,YAAY,KAAK,WAAL,EAAZ,CADkC;;AAGxC,8QAgBc,6DAGC,oOAYT,yRAYgB,2CAAsC,8SAoB3C,qBAAe,QAAO,SAAS,uBAAT,GAAmC,EAAnC,2BACxB,WAhEf,CAHwC;CAAlB;;;;;AA0ExB,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,IAAD,EAAO,MAAP;SACpB,aAAW,WAAW,IAAX,SAAX,EAAkC,gBAAgB,WAAW,IAAX,CAAhB,EAAkC,MAAlC,CAAlC,EACG,IADH,CACQ;WAAM,QAAQ,GAAR,yBAAkC,WAAW,IAAX,CAAlC;GAAN;CAFY;;AAItB,OAAO,OAAP,GAAiB;AACf,iBAAe,aAAf;AACA,UAAQ,MAAR;AACA,SAAO,KAAP;AACA,WAAS,OAAT;CAJF","file":"cli.js","sourcesContent":["import fs                      from 'fs'\nimport minify                  from 'html-minify'\nimport mjmlEngine              from './index'\nimport { version as VERSION }  from '../package.json'\n\nconst engine = mjmlEngine.mjml2html\n\n/*\n * The version number is the NPM\n * version number. It should be the same as the MJML engine\n */\nconst version = () => VERSION\n\n/*\n * Turns a callback style to a Promise style one\n */\nconst promisify = fn =>\n  (...args) =>\n    new Promise((resolve, reject) =>\n      fn(...args.concat((err, ...data) =>\n        err ? reject(err) : resolve(...data))))\n\n/*\n * Minimal Error Handling\n */\nconst error   = (e) => {\n  console.log(e.stack ? e.stack : e)\n}\n\n/*\n * Utility functions\n * write: write to a file\n * read: read a fileexists: ensure the file exists\n */\nconst write   = promisify(fs.writeFile)\nconst read    = promisify(fs.readFile)\nconst exists  = promisify((file, cb) => fs.access(file, fs.R_OK | fs.W_OK, cb))\n\n/*\n * Turns an MJML input file into a pretty HTML file\n * min: boolean that specify the output format (pretty/minified)\n */\nconst render = (input, { min, output }) => {\n  exists(input)\n    .then(()      => read(input))\n    .then(mjml    => engine(mjml.toString()))\n    .then(html    => min ? minify(html) : html)\n    .then(result  => write(output, result))\n    .catch(error)\n}\n\n/*\n * Watch changes on a specific input file by calling render on each change\n */\nconst watch = (input, options) =>\n  fs.watch(input, () =>\n    render(input, options))\n\nconst capitalize = name => name.charAt(0).toUpperCase() + name.slice(1).toLowerCase().replace(/-/g, '')\n\n/*\n* Return the code of an MJML component for a given name\n*/\nconst createComponent = (name, ending) => {\n  const lowerName = name.toLowerCase()\n\n  return `\nimport React, { Component } from 'react'\nimport _ from 'lodash'\nimport {\n  MJMLColumnElement,\n  elements,\n  registerElement,\n} from 'mjml'\n\n/*\n * Wrap your dependencies here.\n */\nconst {\n  text: MjText,\n} = elements;\n\nconst NAME = '${lowerName}'\n\n@MJMLColumnElement({\n  tagName: 'mj-${lowerName}',\n  content: ' ',\n\n  /*\n   * These are your default css attributes\n   */\n  attributes: {\n    'color': '#424242',\n    'font-family': 'Helvetica',\n    'margin-top': '10px'\n  }\n})\nclass ${name} extends Component {\n\n  /*\n   * Build your styling here\n   */\n  getStyles() {\n    const { mjAttribute, color } = this.props\n\n    return _.merge({}, this.constructor.baseStyles, {\n      text: {\n      /*\n       * Get the color attribute\n       * Example: <mj-${lowerName} color=\"blue\">content</mj-${lowerName}>\n       */\n        color: mjAttribute('color')\n      }\n    })\n  }\n\n  render() {\n\n    const css = this.getStyles(),\n          content = 'Hello World!'\n\n    return (\n      <MjText style={ css }>\n        { content }\n      </MjText>\n    )\n  }\n}\n\nregisterElement('${lowerName}', ${name}${ending ? ', { endingTag: true }' : ''})\nexport default ${name}\n`\n}\n\n/*\n * Create a new component based on the default template\n */\nconst initComponent = (name, ending) =>\n  write(`./${capitalize(name)}.js`, createComponent(capitalize(name), ending))\n    .then(() => console.log(`Component created: ${capitalize(name)}`))\n\nmodule.exports = {\n  initComponent: initComponent,\n  render: render,\n  watch: watch,\n  version: version\n}\n"]}