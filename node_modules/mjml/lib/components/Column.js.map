{"version":3,"sources":["../../src/components/Column.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWM,iBAHL,2BAAY;AACX,WAAS,WAAT;CADD;YAGK;;;;;;;;;;gCAYQ;UACF,cAAgB,KAAK,KAAL,CAAhB,YADE;;AAGV,aAAO,iBAAE,KAAF,CAAQ,EAAR,EAAY,KAAK,WAAL,CAAiB,UAAjB,EAA6B;AAC9C,aAAK;AACH,mBAAS,cAAT;AACA,yBAAe,YAAY,gBAAZ,CAAf;AACA,oBAAU,IAAV;AACA,qBAAW,MAAX;AACA,iBAAO,MAAP;AACA,oBAAU,YAAY,OAAZ,CAAV;SANF;AAQA,eAAO;AACL,sBAAY,YAAY,kBAAZ,CAAZ;SADF;OATK,CAAP,CAHU;;;;qCAkBK;mBACkB,KAAK,KAAL,CADlB;UACP,iCADO;UACM,yBADN;;AAEf,UAAM,QAAQ,YAAY,OAAZ,CAAR,CAFS;;AAIf,UAAI,SAAS,SAAT,EAAoB;AACtB,kCAAwB,SAAS,MAAI,OAAJ,CAAjC,CADsB;OAAxB;;yBAIqC,8BAAY,KAAZ,EARtB;;UAQA,2BAAP,MARO;UAQa,yBARb;;AAUf,cAAO,IAAP;AACE,aAAK,GAAL;AACE,oCAAwB,WAAxB,CADF;;AADF,aAIO,IAAL,CAJF;AAKE;AACE,mCAAuB,WAAvB,CADF;AALF,OAVe;;;;6BAoBR;oBAC0C,KAAK,KAAL,CAD1C;UACC,kCADD;UACc,wCADd;UAC8B,0BAD9B;;AAEP,UAAM,QAAQ,YAAY,OAAZ,KAAyB,MAAM,OAAN,CAFhC;AAGP,UAAM,gBAAgB,KAAK,cAAL,EAAhB,CAHC;;AAKP,WAAK,MAAL,GAAc,KAAK,SAAL,EAAd,CALO;;AAOP,aACE;;UAAK,OAAO,KAAK,MAAL,CAAY,GAAZ,EAAiB,WAAW,aAAX,EAA0B,mBAAiB,aAAjB,EAAgC,qBAAmB,SAAS,KAAT,CAAnB,EAAvF;QACE;;YAAO,OAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,0BAAwB,YAAY,YAAZ,CAAxB,EAAmD,OAAM,MAAN,EAApF;UACE;;;YACG,gBADH;WADF;SADF;OADF,CAPO;;;;SAlDL;6BAEG,aAAa;AAClB,MAAI;AACF,YAAQ,MAAR;AACA,mBAAe,GAAf;GAFF;AAIA,OAAK;AACH,mBAAe,KAAf;GADF;;kBA+DW","file":"Column.js","sourcesContent":["import MJMLElement from './decorators/MJMLElement'\nimport React, { Component } from 'react'\nimport _ from 'lodash'\nimport  { widthParser } from '../helpers/mjAttribute'\n\n/**\n * Columns are the basic containers for your content. They must be located under mj-section tags in order to be considered by the engine\n */\n@MJMLElement({\n  tagName: 'mj-column'\n})\nclass Column extends Component {\n\n  static baseStyles = {\n    td: {\n      border: 'none',\n      borderSpacing: '0'\n    },\n    div: {\n      verticalAlign: \"top\"\n    }\n  };\n\n  getStyles() {\n    const { mjAttribute } = this.props\n\n    return _.merge({}, this.constructor.baseStyles, {\n      div: {\n        display: \"inline-block\",\n        verticalAlign: mjAttribute('vertical-align'),\n        fontSize: \"13\",\n        textAlign: \"left\",\n        width: \"100%\",\n        minWidth: mjAttribute('width')\n      },\n      table: {\n        background: mjAttribute('background-color')\n      }\n    })\n  }\n\n  getColumnClass() {\n    const { mjAttribute, sibling } = this.props\n    const width = mjAttribute('width')\n\n    if (width == undefined) {\n      return `mj-column-per-${parseInt(100/sibling)}`\n    }\n\n    const { width: parsedWidth, unit } = widthParser(width)\n\n    switch(unit) {\n      case '%':\n        return `mj-column-per-${parsedWidth}`\n\n      case 'px':\n      default:\n        return `mj-column-px-${parsedWidth}`\n    }\n  }\n\n  render() {\n    const { mjAttribute, renderChildren, sibling } = this.props\n    const width = mjAttribute('width') || (100 / sibling)\n    const mjColumnClass = this.getColumnClass()\n\n    this.styles = this.getStyles()\n\n    return (\n      <div style={this.styles.div} className={mjColumnClass} aria-labelledby={mjColumnClass} data-column-width={parseInt(width)}>\n        <table style={this.styles.table} data-legacy-background={mjAttribute('background')} width=\"100%\">\n          <tbody>\n            {renderChildren()}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n}\n\nexport default Column\n"]}